name: CMake Build and Release

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            artifact_name: Windows
            artifact_extension: .zip
            binary_path: build/Release/sample-qt-app.exe
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            artifact_name: Linux
            artifact_extension: .tar.gz
            binary_path: build/sample-qt-app
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
            artifact_name: macOS
            artifact_extension: .tar.gz
            binary_path: build/sample-qt-app

    steps:
    - uses: actions/checkout@v4

    # Cache vcpkg for Windows
    - name: Cache vcpkg
      if: runner.os == 'Windows'
      uses: actions/cache@v3
      with:
        path: |
          vcpkg
          ${{ github.workspace }}/build/vcpkg_installed
        key: vcpkg-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}
        restore-keys: |
          vcpkg-${{ runner.os }}-

    # Install Qt on different platforms
    - name: Install Qt (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools

    - name: Install Qt (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install qt@5
        echo "$(brew --prefix qt@5)/bin" >> $GITHUB_PATH

    - name: Install vcpkg and Qt (Windows)
      if: runner.os == 'Windows'
      run: |
        git clone https://github.com/Microsoft/vcpkg.git
        .\vcpkg\bootstrap-vcpkg.bat
        .\vcpkg\vcpkg.exe install --triplet x64-windows

    - name: Configure CMake (Windows)
      if: runner.os == 'Windows'
      run: >
        cmake -B build
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
        -S ${{ github.workspace }}

    - name: Configure CMake (Unix)
      if: runner.os != 'Windows'
      run: >
        cmake -B build
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }}

    # Package the application
    - name: Package Application (Windows)
      if: runner.os == 'Windows'
      run: |
        # Create dist directory
        mkdir dist
        # Copy executable and required DLLs
        copy build\Release\*.exe dist\
        copy build\Release\*.dll dist\
        # Create ZIP archive
        7z a qt-app-${{ matrix.artifact_name }}${{ matrix.artifact_extension }} .\dist\*

    - name: Package Application (Unix)
      if: runner.os != 'Windows'
      run: |
        mkdir dist
        cp ${{ matrix.binary_path }} dist/
        tar czf qt-app-${{ matrix.artifact_name }}${{ matrix.artifact_extension }} -C dist .

    # Create Release
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: qt-app-${{ matrix.artifact_name }}${{ matrix.artifact_extension }}
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Upload artifacts for all builds (even non-releases)
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: qt-app-${{ matrix.artifact_name }}
        path: qt-app-${{ matrix.artifact_name }}${{ matrix.artifact_extension }}
        if-no-files-found: error